class HeavyBox {

    int weight; 
    int width;
    int height;
    int depth;
    
    HeavyBox(int w, int h, int d, int m) {
        width = w;
        height = h;
        depth = d;
        weight = m; 
    }
}

1.
	а) Создать динамический массив(ArrayList), содержащий объекты класса HeavyBox. (добавим 2-3 коробки)
	б) Раcпечатать его содержимое используя for each. 
	в) Изменить вес первого ящика на 1. 
	г) Удалить последний ящик. 
	д) Получить массив содержащий ящики из коллекции двумя способами и вывести на консоль. 
	е) Удалить все ящики.
2.+
	Создать TreeSet содержащий HeavyBox. HeavyBox должен реализовать интерфейс Comparable. 
	Распечатать содержимое с помощью for each. (по весу)
3.+
	Пользователь вводит набор чисел в виде одной строки "1, 2, 3, 4, 4, 5". 
	Избавиться от повторяющихся элементов в строке и вывести результат на экран.
4.+
	Напишите методы union(Set<?>... set) и intersect(Set<?> ... set), 
	реализующих операции объединения и пересечения множеств.
	 Протестируйте работу этих методов на предварительно заполненных множествах. 
5. 
	Создать очередь, содержащую объекты класса HeavyBox. Используем класс ArrayDeque. 
	Поместить объекты в очередь с помощью метода offer(). Удалить объекты методом poll().
6.+
	Создать коллекцию, содержащую объекты HeavyBox.
	 Написать метод, который перебирает элементы коллекции и проверяет вес коробок. 
	 Если вес коробки больше 300 гр, коробка перемещается в другую коллекцию.

7.
	Создайте HashMap, содержащий пары значений  - 
	имя игрушки и объект игрушки (класс Toy).
	Перебрать и распечатать пары значений - entrySet().
	Перебрать и распечатать набор из имен продуктов  - keySet().
	Перебрать и распечатать значения продуктов - values().
	Для каждого перебора создать свой метод.
8.
	Создать класс Student, содержащий следующие характеристики
	 – имя, группа, курс, оценки по предметам. 
	 Создать коллекцию, содержащую объекты класса Student. 
	 Написать метод, который удаляет студентов со средним баллом <3. Если средний балл>=3, студент переводится на следующий курс. Напишите метод printStudents(List<Student> students, int course), который получает список студентов и номер курса и печатает на консоль имена тех студентов из списка, которые обучаются на данном курсе.
9.
	Создайте класс Pet и его наследников Cat, Dog, Parrot. 
	Создайте отображение из домашних животных, 
	где в качестве ключа выступает имя животного, 
	а в качестве значения класс Pet. 
	Добавьте в отображение разных животных. 
	Создайте метод выводящий на консоль все все ключи 
	отображения.
10.
	Вместо массивов используйте коллекции. Создать метод, распечатывающий товары каталога, отсортированные по имени, цене или рейтингу. Добавить возможность сортировать в обратном порядке. (Интернет-магазин)
	
	
11. Создать LinkedList и ArrayList, добавить 100000 рандомных числа, замерять скорость выполнения.